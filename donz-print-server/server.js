import express, { json } from 'express';
import * as dotenv from 'dotenv';
import cors from 'cors';
import axios from 'axios';
import OpenAI from 'openai';
import { Client, Databases, ID, Query, Storage, Account } from "appwrite";
import sdk, { InputFile } from 'node-appwrite'
import { File } from 'node:buffer';
import Path from 'node:path';
import * as fs from 'node:fs';
import { pipeline } from 'node:stream';
import { v4 as uuidv4 } from 'uuid';
import Stripe from 'stripe';
import { log } from 'console';
import { fileURLToPath } from 'node:url';
import { createRequire } from 'node:module';
import turl from 'turl'
//import ctx = require.context('./../assets/images/footer/game-providers', false, /\.png$/)



const stripe = new Stripe('sk_test_51OO4SfHPslPtEnTBAV3v0mjdolfDblA6ueLbK0DK8FkvzEt15pJOka3Hm0JJRYotUQQOUpuV41EE5Uud69bYktaq00OM98mtJq');


const clientT = new sdk.Client()
    .setEndpoint("https://cloud.appwrite.io/v1")
    .setProject(process.env.APPWRITE_PROJECT_ID)
    .setKey(process.env.APPWRITE_API_KEY);

dotenv.config()
const app = express();
app.use(cors());
app.use(express.json({ limit: '50mb' }));
app.use(express.static('public'))

//  Config Open AI
const openai = new OpenAI({
    apiKey: `${process.env.OPENAI_API_KEY}`,
});
const chatURL = 'https://api.openai.com/v1/chat/completions';

// Config Appwrite
const client = new Client()
    .setEndpoint("https://cloud.appwrite.io/v1")
    .setProject(process.env.APPWRITE_PROJECT_ID)
// .setJWT(process.env.APPWRITE_API_KEY)
const databases = new Databases(client);
const storage = new sdk.Storage(clientT);
const account = new Account(client);

//  ************  Shorten URL for Printful Requirements   ***********

let newLink;
const findFile = async (newFile, oldUrl) => {
    fs.readdir('./files', (error, files) => {
        for (let file of files) {
            if (file === newFile) {
                turl.shorten(oldUrl).then((link) => {
                    console.log("Link: ", link);
                    newLink = link;
                    return link;
                })
            }
        }
    })
}

//  ************  Hello From Home Page   ***********

app.get('/', (req, res) => {
    res.status(200).json({ message: "Ayo! -From Don Z!" })
})

//  *********  PRINTFUL SERVER FUNCTIONS  **********

app.get('/categories', async (req, res) => {
    let categories;
    try {
        const res = await axios.get('https://api.printful.com/warehouse/products/534')
        categories = res.data.result.categories

    } catch (error) {
        console.error(error);
    }
    res.status(200).json({ message: "Categories Found", body: categories })
})

app.get('/store', async (req, res) => {
    let myStore = {};
    try {
        const res = await axios.get('https://api.printful.com/stores', {
            headers: {
                'Authorization': `Bearer ${process.env.PRINTFUL_API_KEY}`
            }
        })
        myStore = res.data.result[0]
        //  console.log(myStore);
    } catch (error) {
        console.error(error);
    }
    res.status(200).json({ message: "Store Found!", body: myStore })
})

app.get('/products', async (req, res) => {
    let myProducts = {};
    try {
        const res = await axios.get('https://api.printful.com/store/products', {
            headers: {
                'Authorization': `Bearer ${process.env.PRINTFUL_API_KEY}`
            }
        })
        myProducts = res.data.result
        // console.log(myProducts);
    } catch (error) {
        console.error(error);
    }
    res.status(200).json({ message: "Products Found!", body: myProducts })
})

app.get('/products/:id', async (req, res) => {
    let product = req.params
    //console.log("AHAHAH", product.id);
    let myProduct = {};
    try {
        const res = await axios.get(`https://api.printful.com/store/products/${product.id}`, {
            headers: {
                'Authorization': `Bearer ${process.env.PRINTFUL_API_KEY}`
            }
        })
        myProduct = res.data.result
        // console.log(myProduct);
    } catch (error) {
        console.error(error);
    }
    res.status(200).json({ message: "Product Found!", body: myProduct })
})

app.post('/create', async (req, res) => {
    console.log('Creating New Product', req.body);

    const options = {
        method: "POST",
        headers: {
            "Authorization": `Bearer ${process.env.PRINTFUL_API_KEY}`,
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            "sync_product": {
                "name": "These will be generated by AI",
                "thumbnail": req.body.file
            },
            "sync_variants": [
                {
                    "retail_price": "29.99",
                    "variant_id": 13431,
                    "files": [
                        {
                            "type": "default",
                            "url": req.body.file
                        }
                    ]
                }
            ]
        }),
    }
    let data;

    try {
        const res = await fetch('https://api.printful.com/store/products', options)
        data = await res.json()
        console.log("DATA", data);
        // res.send(data)
        // console.log("Res: ", res, "Req: ", req);
    } catch (error) {
        console.error(error);
    }
    res.status(200).json({ message: "Created Product", data: data })
})

app.post('/generate', async (req, res) => {
    console.log('Generating Mockup...');
    const { imageUrl } = req.body;
    const options = {
        method: "POST",
        headers: {
            "Authorization": `Bearer ${process.env.PRINTFUL_API_KEY}`,
            "Content-Type": "application/json",
            "PF-Store-Id": '12741472'
        },
        body: JSON.stringify({
            "variant_ids": [
                13431,
            ],
            "format": "jpg",
            "files": [
                {
                    "placement": "default",
                    "image_url": imageUrl,
                    "position": {
                        "area_width": 2100,
                        "area_height": 1650,
                        "width": 2100,
                        "height": 1650,
                        "top": 0,
                        "left": 0
                    }
                }
            ]
        }),
    }
    let data;
    let taskKey;

    try {
        const res = await fetch('https://api.printful.com/mockup-generator/create-task/534', options)
        data = await res.json()
        // res.send(data)"gt-608666498"gt-608673738
        console.log("ResPoNsE: ", data);
        taskKey = data.result.task_key;
        console.log("Task Key: ", taskKey);
    } catch (error) {
        console.error(error);
    }
    res.status(200).json({ message: "Created Mockups", task_key: taskKey })
})

app.get('/mockup/:task', async (req, res) => {
    const task = req.params;
    console.log("Saving Mockups...", task.task);
    let myMockups;
    try {
        const res = await axios.get(`https://api.printful.com/mockup-generator/task?task_key=${task.task}`, {
            headers: {
                'Authorization': `Bearer ${process.env.PRINTFUL_API_KEY}`
            }
        })
        myMockups = await res.data.result.mockups[0]
        console.log(myMockups);
    } catch (error) {
        console.error(error);
    }
    res.status(200).json({ message: "Mockups Saved!", images: myMockups })
})

app.post('/draftorder', async (req, res) => {
    console.log('Drafting Order...');

    let cartItems = req.body.body.cartItems
    let orderDetails = req.body.body.orderDetails
    let itemSpread = [];
    let cartTotal = 0;

    cartItems.map((item) => {
        cartTotal = cartTotal + item.retail_price;
        console.log("Or maaaybe..", item.files[1].filename);
        itemSpread.push({
            "id": item.sync_product_id,
            //"external_id": item.external_id,
            "variant_id": item.variant_id,
            "sync_variant_id": item.id,
            //"external_variant_id": cartItems.external_id.toString(),
            //"warehouse_product_variant_id": 534,
            // "product_template_id": item.product.variant_id,
            // "external_product_id": "template-123",
            "quantity": 1,
            "price": "15.95",
            "retail_price": item.retail_price,
            "name": item.name,
            "product": {
                "variant_id": item.product.variant_id,
                "product_id": item.product.product_id,
                "image": item.files[1].filename,
                "name": "Jigsaw Puzzle (250 Pieces)"
            },
            "files": item.files,
            // "options": [],
            "sku": item.sku,
            "discontinued": false,
            "out_of_stock": false
        })
    })

    const options = {
        method: "POST",
        headers: {
            "Authorization": `Bearer ${process.env.PRINTFUL_API_KEY}`,
            "Content-Type": "application/json",
            "PF-Store-Id": '12741472'
        },
        body: JSON.stringify({
            "shipping": "STANDARD",
            "recipient": {
                "name": orderDetails.firstName,
                "company": orderDetails.lastName,
                "address1": "4980 Happy Pl.",
                "address2": orderDetails.address2,
                "city": "Bradenton",
                "state_code": "FL",
                "state_name": "Florida",
                "country_code": "US",
                "country_name": "united States",
                "zip": 34208,
                //"phone": "",
                "email": orderDetails.email,
            },
            "items": itemSpread,
            "retail_costs": cartTotal,
        }),
    }
    let data;


    try {
        const res = await fetch('https://api.printful.com/orders', options)
        data = await res.json()
        // res.send(data)"gt-608666498"gt-608673738
        console.log("ResPoNsE: ", data);
        // taskKey = data.result.task_key;
        // console.log("Task Key: ", taskKey);
    } catch (error) {
        console.error(error);
    }
    res.status(200).json({ message: "Created Order Draft", body: data })
})



//  *********  OPEN AI SERVER FUNCTIONS  **********

app.post('/createimageprompt', async (req, res) => {
    console.log('Generating Image Prompts, Saying...', req.body)
    let promptSplit;
    let finalPrompts = []

    const savePrompts = async (message) => {
        const res = await databases.createDocument(
            process.env.APPWRITE_DATABASE_ID,
            process.env.APPWRITE_PROMPT_COLLECTION_ID,
            ID.unique(),
            {
                text_prompts: message,
            }
        )
        console.log("Saved Prompt: ", message, res);
    }

    const getBusy = async (i) => {
        try {
            const res = await fetch('http://localhost:8080/imagination', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    input: finalPrompts[i],
                })
            })
            const data = await res.json();
            const imageUrl = await data.photo;
            console.log("We have an image URL: ", imageUrl);
        } catch (error) {
            console.log(error);
        }
    }

    try {
        const response = await openai.chat.completions.create({
            messages: [{ role: "user", content: req.body.input }],
            model: "gpt-3.5-turbo",
            max_tokens: 500,
        });
        const msg = response.choices[0].message;
        promptSplit = msg.content.split(/\r?\n/);

        promptSplit.forEach((line) => {
            if (line.length > 100) {
                finalPrompts.push(line)
                savePrompts(line)
            }
        })

        if (finalPrompts.length > 0) {
            let index = 0;
            const interval = setInterval(async () => {
                await getBusy(index)
                if (index === finalPrompts.length - 1) {
                    clearInterval(interval)
                }
                index += 1;
            }, 60000);
        }

        let data = {
            prompts: finalPrompts,
        }

        res.send(data);
        console.log(data);
    } catch (error) {
        console.error(error);
    }
})


app.post('/imagination', async (req, res) => {
    console.log('Generating Image... Please Hold');
    let collectImage;
    try {
        const { input } = req.body;
        const response = await openai.images.generate({
            prompt: input,
            model: "dall-e-3",
            quality: 'hd',
            style: 'vivid',
            n: 1,
            size: '1792x1024',
            response_format: 'url'
        })
        const image = response.data[0].url;
        const imageName = `${uuidv4()}.png`
        const newPath = Path.resolve(`C:`, 'files', imageName);
        const responz = await axios.get(image, { responseType: 'stream' });
        await responz.data.pipe(fs.createWriteStream(newPath))

        // console.log("IMAGE: ", image);
        // const saveImage = await databases.createDocument(
        //     process.env.APPWRITE_DATABASE_ID,
        //     process.env.APPWRITE_COLLECTION_ID,
        //     ID.unique(),
        //     {
        //         image_url: image,
        //     }
        // )

        if (image) {
            try {
                const imageUrl = image;

                const response = await fetch('http://localhost:8080/generate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        imageUrl,
                    })
                })
                const genData = await response.json();

                if (genData) {
                    console.log("Wait for 10 seconds...");
                    setTimeout(async () => {

                        const genLink = await findFile(imageName, imageUrl)
                        console.log("GEN LINK:", genLink);
                        try {
                            const task = genData.task_key;
                            const response = await fetch(`http://localhost:8080/mockup/${task}`, {
                                method: 'GET',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                            })
                            const mockups = await response.json();
                            //console.log(mockups.images);
                            if (mockups) {
                                const previewImage = await mockups.images.mockup_url
                                // console.log("IS THIS STILL THE IMAGE:  ", image);
                                try {
                                    console.log("Going for 4!  : ", previewImage);
                                    const response = await fetch('http://localhost:8080/create', {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json'
                                        },
                                        body: JSON.stringify({
                                            file: newLink,
                                            preview: previewImage,
                                        })
                                    })
                                    const created = await response.json();
                                    console.log("Product Added To Store!", created);
                                } catch (error) {
                                    console.log(error)
                                }
                            }
                        } catch (error) {
                            console.log(error)
                        }
                    }, 20000)
                }
            } catch (error) {
                console.log(error);
            }
        }

        //console.log("Saved Something!", saveImage);
        res.status(200).json({ message: "Success!", photo: image })
    } catch (error) {
        res.status(500).json({ message: "Something Went Wrong, Please Try Again" })
        console.error(error);
    }

})


//  *********  APPWRITE SERVER FUNCTIONS  **********

app.get('/database', async (req, res) => {
    let data;
    try {
        const res = await databases.listDocuments(
            process.env.APPWRITE_DATABASE_ID,
            process.env.APPWRITE_COLLECTION_ID,
        )
        data = res.documents
        // console.log(res.documents);
    } catch (error) {
        console.error(error);
    }
    res.status(200).json({ message: "Data Found", body: data })
})

app.get('/storage', async (req, res) => {
    let files;
    try {
        const res = await storage.listFiles(
            process.env.APPWRITE_BUCKET_ID,
        )
        files = res.files
    } catch (error) {
        console.error(error);
    }
    res.status(200).json({ message: "Data Found", body: files })
})

app.post('/signup', async (req, res) => {
    let data;
    try {
        const res = await account.create(
            ID.unique(),
            req.body.userEmail,
            req.body.userPassword,
        )
        data = res
        // console.log("From Server: ", res);
    } catch (error) {
        console.error(error);
    }
    res.status(200).json({ message: "Created User!", body: data })
})

app.post('/login', async (req, res) => {
    //console.log(req.body);
    let data;
    try {
        const res = await account.createEmailSession(
            req.body.userEmail,
            req.body.userPassword,
        )
        data = res
        // console.log("From Server: ", res);
    } catch (error) {
        console.error(error);
    }
    res.status(200).json({ message: "User Logged In!", body: data })
})

app.get('/account', async (req, res) => {
    // console.log("get");
    let data = null;
    try {
        const res = await account.get()
        if (res.data) {
            data = res
        }
        // console.log("From Server: ", res);
    } catch (error) {
        //console.error(error);
    }
    res.status(200).json({ message: "Current User: ", body: data })
})

app.get('/logout', async (req, res) => {

    let data;
    try {
        const res = await account.deleteSession('current')
        data = res
        // console.log("From Server: ", res);
    } catch (error) {
        console.error(error);
    }
    res.status(200).json({ message: "User Logged Out!", body: data })
})

app.get('/upload/image', async (req, res) => {
    //const newUploadId = ID.unique()

    const downloadUrl = async () => {
        const url = 'https://images.unsplash.com/photo-1541701494587-cb58502866ab?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D'
        const newPath = Path.resolve(`C:`, 'files', 'image2.png');
        const response = await axios.get(url, { responseType: 'stream' });
        response.data.pipe(fs.createWriteStream(newPath))

        return new Promise((resolve, reject) => {
            response.data.on('end', () => {
                resolve();
            })
            response.data.on('error', (err) => {
                reject(err)
            })
        })
    }
    await downloadUrl()

    res.status(200).json({ message: "Saved Blob!", })

})




//  *********  STRIPE SERVER FUNCTIONS  **********

app.post('/intent', async (req, res) => {
    let data;
    try {
        const paymentIntent = await stripe.paymentIntents.create({
            amount: req.body.product.cartTotal,
            currency: 'usd',
            automatic_payment_methods: {
                enabled: true,
            },
            receipt_email: req.body.token.email,
            description: req.body.product.name,
        });
        data = paymentIntent
        console.log("From Server: ", data);
    } catch (error) {
        console.error(error);
    }
    res.status(200).json({ clientSecret: data.client_secret })
})

//   ****************       *******************


app.listen(8080, () => {
    console.log("Server is running on PORT 8080");
})